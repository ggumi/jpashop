# 무조건 pk 가 세팅된 후 > 영속성 상태가 됨
(ex. em.persist(team);)

# ANSI 표준 JOIN SQL
select * from member m
    join team t on m.team_id = t.team_id;

# 어노테이션
DB 와 MAPPING 하는 어노테이션

#
em.flush() -> 영속성컨텍스트 쿼리들 디비로 날려버려
em.clear() -> 1차 캐쉬 초기화

# 양방향 연관관계와 연관관계의 주인
-연관관계 찾을 때, 객체(참조) 테이블(외래키,조인)
- 테이블은 외래키로 방향 자유롭게 이동, 객체는 아
-mappedBy
    -객체와 테이블이 관계를 맺는 차이
        - 객체 = 서로 다른 단방향 2개
        - 테이블 = 양방향 1개(방향이 없음)
    -주인은 mappedBy(~에 의해 매핑된) 속성 사용x
- 외래 키가 있는 곳을 주인
- 디비 입장에서 외래키가 있는 곳이 N(연관관계 주인), 외래키 없는 곳이 1
- 주의 : 연관관계 주인에 값(외래 키) 입력

- 연관관계 편의 메소드 입력
MEMBER 클래스에서
public void setTeam(Team team) {
    this.team = team;
    team.getMembers().add(this); -> 연관관계 주인이 아닌 TEAM 클래스에도 MEMBER 넣어주기
}
TEAM 클래스에서 넣어도 돼
두 곳에 다 넣지는 마

- 컨트롤러에선 entity 로 반환하지마, DTO로 반환해

**********
단방향 매핑만으로 이미 연관관계 매핑은 완료
양방향은 필요할 때 추가해도 돼(테이블에 영향주지 않음)

------------------------------------
